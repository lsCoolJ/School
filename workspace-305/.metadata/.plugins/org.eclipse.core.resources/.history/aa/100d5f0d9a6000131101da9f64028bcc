/**
 * Ben Foster. Final project Autumn 2013
 */
package epidemic.progpracticum.model;

import java.awt.Point;

/** The Bird class creates a bird.
 * @author benf94
 * @version 12/6/2013
 */
public class Bird extends AbstractEntity {
    
    /**
     * The location of the bird.
     */
    private Point myLocation;
    
    /**
     * Used to get rid of checkstyle errors.
     */
    private final int myTen = 10;
    
    /**
     * Used to get rid of checkstyle errors.
     */
    private final int myThousandTen = 1010;
    
    /**
     * Used to get rid of checkstyle errors.
     */
    private final int myFiveHunnerdTen = 510;
    
    /**
     * Used to get rid of checkstyle errors.
     */
    private final int myNumThree = 3;
    
    /**
     * Used to get rid of checkstyle errors.
     */
    private final int myNumFour = 4;
    
    /**
     * Used to get rid of checkstyle errors.
     */
    private final int myNumFive = 5;
    
    /**
     * Used to get rid of checkstyle errors.
     */
    private final int myNumSix = 6;
    
    /**
     * Used to get rid of checkstyle errors.
     */
    private final int myNumSeven = 7;

    /**
     * Parameterized constructor that sets object's state to parameters passed.
     * @param aSpecies is a character denoting the species
     * @param aSick is a boolean value denoting whether the object is sick or not
     * @param aDayNum >= 0, the number of days the object has been sick
     * @param aLocation is the location of the object in the world, 0 <= x < world width, 
     *                  0 <= y < world height
     * @custom.post object's state set to parameters passed
     */
    public Bird(final char aSpecies, final boolean aSick,
                final int aDayNum, final Point aLocation) {
        super(aSpecies, aSick, aDayNum, aLocation);
        myLocation = aLocation;
    }
    
    /**
     * Abstract method - moves object's location in the world 
     *                  according to object's species movement rules.
     * @return The new Location of the Individual.                  
     */
    @Override
    public Point move() {
        final int birdMovement = SimParams.GENERATOR.nextInt(myNumThree) + 1;
        final int caseNumber = SimParams.GENERATOR.nextInt(8);
        Point newLocation;
        final int thisX = myLocation.x;
        final int thisY = myLocation.y;
        int yMove;
        int xMove;
        System.out.println(caseNumber);
        switch(caseNumber) {
            case 1:
                xMove = myTen * birdMovement;
                yMove = 0;
                break;
            case 2:
                xMove = myTen * birdMovement;
                yMove = -myTen * birdMovement;
                break;
            case myNumThree:
                xMove = 0;
                yMove = myTen * birdMovement;
                break;
            case myNumFour:
                xMove = -myTen * birdMovement;
                yMove = myTen * birdMovement;
                break;
            case myNumFive:
                xMove = -myTen * birdMovement;
                yMove = 0;
                break;
            case myNumSix:
                xMove = -myTen * birdMovement;
                yMove = -myTen * birdMovement;
                break;
            case myNumSeven:
                xMove = 0;
                yMove = -myTen * birdMovement;
                break;
            default:
                xMove = myTen * birdMovement;
                yMove = myTen * birdMovement;
                break;
        }
        
        newLocation = new Point(thisX + xMove, thisY + yMove);
        myLocation = newLocation;
        
        if (newLocation.x > myThousandTen) {
            newLocation.setLocation(newLocation.x - myThousandTen, newLocation.y);
        }
        
        if (newLocation.x < -myTen) {
            newLocation.setLocation(newLocation.x + myThousandTen, newLocation.y);
        }

        if (newLocation.y > myFiveHunnerdTen) {
            newLocation.setLocation(newLocation.x, newLocation.y - myFiveHunnerdTen);
        }
        
        if (newLocation.y < -myTen) {
            newLocation.setLocation(newLocation.x, newLocation.y + myFiveHunnerdTen);
        }
        return newLocation;
    }

}
